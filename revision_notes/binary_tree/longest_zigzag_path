read in this question, the question clearly states start at any node,
so to do that let's assume we reached a node from root, and here we must've gotten here ,
this node is either on left side or right side of it's parent node right, so if it's on left i need to calclate right chid length of current node
,if current node is to right of parent node, i need to calculate left child of current node,or i can start from this node as a fresh node
and calculate length from the directions as i have done here;
good one
let's explain
if you don't understand 
check this solution
https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/solutions/7184888/detailed-guide-using-dfs-o-n-c-others

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 void dfs(TreeNode*root, bool is_left, int len,int &ans)
 {
    if(!root)
    return;
    ans=max(ans,len);
    if(is_left)
    {
        dfs(root->right,false,1+len,ans);//go_right
        dfs(root->left,true,1,ans);//you are starting as a fresh node
    }
    else
    {
        dfs(root->left,true,1+len,ans);//continue the existing path
        dfs(root->right,false,1,ans);//start a fresh path by going right
    }

 }
class Solution {
public:
    int longestZigZag(TreeNode* root) {
        int ans=0;
        
        dfs(root,true,0,ans);//start with root and previous node s as 0 ans let's a ssume it started with left
        dfs(root,false,0,ans);
        return ans;
    }
};

this is good one do again
